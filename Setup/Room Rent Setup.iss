; Script generated by the Inno Script Studio Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Room rent"
#define MyAppVersion GetFileVersion('D:\\Paid Projects\\Rent Management\\Room Rent\\Room Rent\\bin\\Debug\\Room Rent.exe')
;"1.0.1.51"
;GetFileVersion('D:\\Paid Projects\\Rent Management\\Room Rent\\Room Rent\\bin\\Debug\\Room Rent.exe')
#define MyAppPublisher "Abstract Concepts Pty Ltd"
#define MyAppURL "http://www.abstract-concepts.com.au/"
#define MyAppExeName "Room Rent.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{75F1767F-820F-4881-8617-E8CD258C6D36}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\{#MyAppName}
DisableDirPage=yes
DisableProgramGroupPage=yes
OutputDir=D:\Paid Projects\Rent Management\Room Rent\Setup
OutputBaseFilename=Room rent setup
;Password=
Password=0d3sk@r3nt_pa55
Encryption=yes
Compression=lzma
SolidCompression=yes
MinVersion=0,6.1
UninstallDisplayName=Room rent
UninstallDisplaySize=3
UninstallDisplayIcon={app}\Room Rent.exe

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Files]
Source: "D:\Paid Projects\Rent Management\Room Rent\Room Rent\bin\Debug\Room Rent.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "..\Room Rent\bin\Debug\Newtonsoft.Json.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "..\Room Rent\bin\Debug\DirectorySecurity.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "..\Room Rent\bin\Debug\SMSClass.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "..\Room Rent\Resources\dbLocation.txt"; DestDir: "{app}"; Flags: ignoreversion uninsneveruninstall
Source: "..\..\Blank db\FixedsysNeo+.ttf"; DestDir: "{fonts}"; FontInstall: "FixedsysNeo+"; Flags: onlyifdoesntexist uninsneveruninstall
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{userdesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"

[Run]
;Filename: "{app}\DirectorySecurity.exe"; Parameters: "{app}"
Filename: "netsh"; Parameters: "advfirewall firewall add rule name=""allowSQLOut1433"" protocol=TCP dir=out localport=1433 action=allow"; WorkingDir: "{sys}"; Flags: shellexec runhidden
Filename: "netsh"; Parameters: "advfirewall firewall add rule name=""allowSQLIn1433"" protocol=TCP dir=in localport=1433 action=allow"; WorkingDir: "{sys}"; Flags: shellexec runhidden
Filename: "netsh"; Parameters: "advfirewall firewall add rule name=""allowRoomRentOut"" dir=out program=""{app}\{#MyAppExeName}"" action=allow"; WorkingDir: "{sys}"; Flags: shellexec runhidden
Filename: "netsh"; Parameters: "advfirewall firewall add rule name=""allowRoomRentIn"" dir=in program=""{app}\{#MyAppExeName}"" action=allow"; WorkingDir: "{sys}"; Flags: shellexec runhidden
;Filename: "pkgmgr"; Parameters: "/l:log.etw /iu:IIS-WebServerRole;IIS-WebServer;IIS-CommonHttpFeatures;IIS-StaticContent;IIS-DefaultDocument;IIS-DirectoryBrowsing;IIS-HttpErrors;IIS-HttpRedirect;IIS-ApplicationDevelopment;IIS-ASPNET;IIS-NetFxExtensibility;IIS-ASP;IIS-CGI;IIS-ISAPIExtensions;IIS-ISAPIFilter;IIS-ServerSideIncludes;IIS-HealthAndDiagnostics;IIS-HttpLogging;IIS-LoggingLibraries;IIS-RequestMonitor;IIS-HttpTracing;IIS-CustomLogging;IIS-Security;IIS-BasicAuthentication;IIS-URLAuthorization;IIS-RequestFiltering;IIS-IPSecurity;IIS-Performance;IIS-HttpCompressionStatic;IIS-HttpCompressionDynamic;IIS-WebServerManagementTools;IIS-ManagementConsole;IIS-ManagementScriptingTools;IIS-ManagementService;IIS-IIS6ManagementCompatibility;IIS-Metabase;IIS-WMICompatibility;IIS-LegacyScripts;IIS-LegacySnapIn;WAS-WindowsActivationService;WAS-ProcessModel;WAS-NetFxEnvironment;WAS-ConfigurationAPI"; Flags: 64bit; Description: "Install IIS"; Check: IsWin64; AfterInstall: IISButtonOnClick
;Filename: "pkgmgr"; Parameters: "/l:log.etw /iu:IIS-WebServerRole;IIS-WebServer;IIS-CommonHttpFeatures;IIS-StaticContent;IIS-DefaultDocument;IIS-DirectoryBrowsing;IIS-HttpErrors;IIS-HttpRedirect;IIS-ApplicationDevelopment;IIS-ASPNET;IIS-NetFxExtensibility;IIS-ASP;IIS-CGI;IIS-ISAPIExtensions;IIS-ISAPIFilter;IIS-ServerSideIncludes;IIS-HealthAndDiagnostics;IIS-HttpLogging;IIS-LoggingLibraries;IIS-RequestMonitor;IIS-HttpTracing;IIS-CustomLogging;IIS-Security;IIS-BasicAuthentication;IIS-URLAuthorization;IIS-RequestFiltering;IIS-IPSecurity;IIS-Performance;IIS-HttpCompressionStatic;IIS-HttpCompressionDynamic;IIS-WebServerManagementTools;IIS-ManagementConsole;IIS-ManagementScriptingTools;IIS-ManagementService;IIS-IIS6ManagementCompatibility;IIS-Metabase;IIS-WMICompatibility;IIS-LegacyScripts;IIS-LegacySnapIn;WAS-WindowsActivationService;WAS-ProcessModel;WAS-NetFxEnvironment;WAS-ConfigurationAPI"; Flags: 32bit; Description: "Install IIS"; Check: not IsWin64; AfterInstall: IISButtonOnClick
;Filename: "ipconfig"; WorkingDir: "{sys}"; Flags: shellexec runhidden; Description: "Install IIS Website"; AfterInstall: IISButtonOnClick


[Dirs]
Name: "{app}"; Permissions: everyone-full

[Code]
const
  IISServerName = 'localhost';
  IISServerNumber = '1';
  IISURL = 'http://127.0.0.1';
  dotnetfx40full_url = 'http://download.microsoft.com/download/1/B/E/1BE39E79-7E39-46A3-96FF-047F95396215/dotNetFx40_Full_setup.exe';
procedure IISButtonOnClick();
var
  IIS, WebSite, WebServer, WebRoot, VDir: Variant;
  ErrorCode: Integer;
begin
  {if MsgBox('Setup will now connect to Microsoft IIS Server ''' + IISServerName + ''' and create a virtual directory. Do you want to continue?', mbInformation, mb_YesNo) = idNo then
    Exit;  }

  { Create the main IIS COM Automation object }

  try
    IIS := CreateOleObject('IISNamespace');
  except
    Exit;
    {RaiseException('Please install Microsoft IIS first.'#13#13'(Error ''' + GetExceptionMessage + ''' occurred)'); }
  end;

  { Connect to the IIS server }

  WebSite := IIS.GetObject('IIsWebService', IISServerName + '/w3svc');
  WebServer := WebSite.GetObject('IIsWebServer', IISServerNumber);
  WebRoot := WebServer.GetObject('IIsWebVirtualDir', 'Root');
  {MsgBox(WebSite, mbInformation, mb_Ok); }
  {MsgBox(WebServer, mbInformation, mb_Ok);  }
  {MsgBox(WebRoot, mbInformation, mb_Ok);  }
  { (Re)create a virtual dir }

  try
    WebRoot.Delete('IIsWebVirtualDir', 'roomrentsite');
    WebRoot.SetInfo();
  except
  end;

  VDir := WebRoot.Create('IIsWebVirtualDir', 'roomrentsite');
  VDir.AccessRead := True;
  VDir.AppFriendlyName := 'Inno Setup';
  VDir.Path := ExpandConstant('{app}\webserver');
  {'C:\inetpub\innosetup';}
  VDir.AppCreate(True);
  VDir.SetInfo();

  {MsgBox('Created virtual directory ''' + VDir.Path + '''.', mbInformation, mb_Ok);

  { Write some html and display it }

  {if MsgBox('Setup will now write some HTML and display the virtual directory. Do you want to continue?', mbInformation, mb_YesNo) = idNo then
    Exit;}

  ForceDirectories(VDir.Path);
  SaveStringToFile(VDir.Path + '/index.htm', '<html><body>Bidyut Kumar Das</body></html>', False);
  {ShellExecAsOriginalUser('open', IISURL + '/roomrentsite/index.htm', '', '', SW_SHOWNORMAL, ewNoWait, ErrorCode);}
  {if not ShellExecAsOriginalUser('open', IISURL + '/roomrentsite/index.htm', '', '', SW_SHOWNORMAL, ewNoWait, ErrorCode) then
    MsgBox('Can''t display the created virtual directory: ''' + SysErrorMessage(ErrorCode) + '''.', mbError, mb_Ok);}
end;
   
function IsDotNetDetected(version: string; service: cardinal): boolean;
// Indicates whether the specified version and service pack of the .NET Framework is installed.
//
// version -- Specify one of these strings for the required .NET Framework version:
//    'v1.1.4322'     .NET Framework 1.1
//    'v2.0.50727'    .NET Framework 2.0
//    'v3.0'          .NET Framework 3.0
//    'v3.5'          .NET Framework 3.5
//    'v4\Client'     .NET Framework 4.0 Client Profile
//    'v4\Full'       .NET Framework 4.0 Full Installation
//
// service -- Specify any non-negative integer for the required service pack level:
//    0               No service packs required
//    1, 2, etc.      Service pack 1, 2, etc. required
var
    key: string;
    install, serviceCount: cardinal;
    success: boolean;
begin
    key := 'SOFTWARE\Microsoft\NET Framework Setup\NDP\' + version;
    // .NET 3.0 uses value InstallSuccess in subkey Setup
    if Pos('v3.0', version) = 1 then begin
        success := RegQueryDWordValue(HKLM, key + '\Setup', 'InstallSuccess', install);
    end else begin
        success := RegQueryDWordValue(HKLM, key, 'Install', install);
    end;
    // .NET 4.0 uses value Servicing instead of SP
    if Pos('v4', version) = 1 then begin
        success := success and RegQueryDWordValue(HKLM, key, 'Servicing', serviceCount);
    end else begin
        success := success and RegQueryDWordValue(HKLM, key, 'SP', serviceCount);
    end;
    result := success and (install = 1) and (serviceCount >= service);
end;

function InitializeSetup(): Boolean;
var
  ErrorCode: Integer;
begin
    if not IsDotNetDetected('v4\Full', 0) then begin
        if MsgBox(ExpandConstant('{#MyAppName}') + ' requires Microsoft .NET Framework 4.0.'#13#13
            'Please use Windows Update to install this version,'#13
            'and then re-run the '+ ExpandConstant('{#MyAppName}') +' setup program.'#13#13
            'Setup will now take you .net framework 4.0 download page. Do you want to continue?', mbInformation, mb_YesNo) = idNo then
          Exit;
        ShellExecAsOriginalUser('open', dotnetfx40full_url, '', '', SW_SHOWNORMAL, ewNoWait, ErrorCode);
        {AddProduct('dotNetFx40_Full_setup.exe', '', CustomMessage('sql2008r2expressx64_title'), CustomMessage('sql2008r2expressx64_size'), dotnetfx40full_url,false,false)}
        result := false;
    end else
        result := true;
end;

   